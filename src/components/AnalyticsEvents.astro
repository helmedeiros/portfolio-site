---
// Analytics Events Component - Production ready
---

{import.meta.env.PROD && (
  <script is:inline>
    // Enhanced Analytics Events - Production version
    (function() {
      'use strict';

      // Utility functions
      const throttle = (func, wait) => {
        let timeout;
        return function executedFunction(...args) {
          const later = () => {
            clearTimeout(timeout);
            func(...args);
          };
          clearTimeout(timeout);
          timeout = setTimeout(later, wait);
        };
      };

      const sanitizeString = (str) => {
        return str ? str.replace(/[<>\"']/g, '').substring(0, 100) : '';
      };

      // Safe event tracking function
      const trackEvent = (eventName, parameters = {}) => {
        try {
          if (typeof window.gtag === 'function') {
            window.gtag('event', eventName, parameters);
          } else {
            // Queue event for when gtag becomes available
            window.dataLayer = window.dataLayer || [];
            window.dataLayer.push({
              'event': eventName,
              ...parameters
            });
          }
        } catch (error) {
          console.error('Analytics tracking error:', error);
        }
      };

      // Track section views using Intersection Observer
      const setupSectionTracking = () => {
        const observerOptions = {
          threshold: 0.6,
          rootMargin: '-80px 0px'
        };

        const sectionObserver = new IntersectionObserver((entries) => {
          entries.forEach(entry => {
            if (entry.isIntersecting) {
              const sectionName = sanitizeString(entry.target.id);
              if (sectionName) {
                trackEvent('section_view', {
                  'event_category': 'navigation',
                  'event_label': sectionName,
                  'section_name': sectionName
                });
              }
            }
          });
        }, observerOptions);

        document.querySelectorAll('section[id]').forEach(section => {
          sectionObserver.observe(section);
        });
      };

      // Track navigation menu clicks
      const setupNavigationTracking = () => {
        document.querySelectorAll('nav a[href^="#"]').forEach(link => {
          link.addEventListener('click', function(e) {
            const section = sanitizeString(this.getAttribute('href').substring(1));
            if (section) {
              trackEvent('navigation_click', {
                'event_category': 'navigation',
                'event_label': section,
                'navigation_type': 'menu'
              });
            }
          }, { passive: true });
        });
      };

      // Track critical conversion events
      const setupConversionTracking = () => {
        // Contact button interaction
        const contactBtn = document.getElementById('contact-btn');
        if (contactBtn) {
          contactBtn.addEventListener('click', function() {
            trackEvent('contact_initiated', {
              'event_category': 'conversion',
              'event_label': 'hero_contact_button',
              'value': 1
            });
          }, { passive: true });
        }

        // Email reveal tracking
        const emailDisplay = document.getElementById('email-display');
        if (emailDisplay) {
          const observer = new MutationObserver((mutations) => {
            mutations.forEach((mutation) => {
              if (mutation.type === 'childList' && mutation.addedNodes.length > 0) {
                const emailLink = Array.from(mutation.addedNodes).find(node =>
                  node.tagName === 'A' && node.href && node.href.startsWith('mailto:')
                );
                if (emailLink) {
                  trackEvent('email_revealed', {
                    'event_category': 'conversion',
                    'event_label': 'contact_email_reveal',
                    'value': 2
                  });
                }
              }
            });
          });
          observer.observe(emailDisplay, { childList: true });
        }
      };

      // Track external link clicks
      const setupExternalLinkTracking = () => {
        document.querySelectorAll('a[href^="http"]').forEach(link => {
          if (link.hostname === window.location.hostname) return;

          link.addEventListener('click', function(e) {
            const linkText = sanitizeString(this.textContent.trim());
            const linkUrl = this.href;
            const linkDomain = this.hostname;

            trackEvent('outbound_click', {
              'event_category': 'engagement',
              'event_label': linkDomain,
              'link_text': linkText,
              'link_url': linkUrl
            });
          }, { passive: true });
        });
      };

      // Track scroll depth milestones
      const setupScrollTracking = () => {
        let maxScroll = 0;
        const milestones = [25, 50, 75, 90];
        const trackedMilestones = new Set();

        const trackScrollDepth = throttle(() => {
          const scrollPercent = Math.round(
            (window.pageYOffset / (document.documentElement.scrollHeight - window.innerHeight)) * 100
          );

          if (scrollPercent > maxScroll) {
            maxScroll = scrollPercent;
            milestones.forEach(milestone => {
              if (scrollPercent >= milestone && !trackedMilestones.has(milestone)) {
                trackedMilestones.add(milestone);
                trackEvent('scroll_depth', {
                  'event_category': 'engagement',
                  'event_label': `${milestone}_percent`,
                  'value': milestone
                });
              }
            });
          }
        }, 1000);

        window.addEventListener('scroll', trackScrollDepth, { passive: true });
      };

      // Track skill hover interactions
      const setupSkillTracking = () => {
        document.querySelectorAll('.bg-gray-50.p-4.rounded-xl').forEach(skill => {
          let hoverTimeout;

          skill.addEventListener('mouseenter', function() {
            const skillText = sanitizeString(this.textContent.trim());
            hoverTimeout = setTimeout(() => {
              trackEvent('skill_interest', {
                'event_category': 'engagement',
                'event_label': skillText,
                'engagement_time_msec': 1000
              });
            }, 1000);
          }, { passive: true });

          skill.addEventListener('mouseleave', function() {
            if (hoverTimeout) {
              clearTimeout(hoverTimeout);
            }
          }, { passive: true });
        });
      };

      // Initialize all tracking
      const initializeTracking = () => {
        try {
          setupSectionTracking();
          setupNavigationTracking();
          setupConversionTracking();
          setupExternalLinkTracking();
          setupScrollTracking();
          setupSkillTracking();
        } catch (error) {
          console.error('Analytics initialization error:', error);
        }
      };

      // Start when DOM is ready
      if (document.readyState === 'loading') {
        document.addEventListener('DOMContentLoaded', initializeTracking);
      } else {
        initializeTracking();
      }

    })();
  </script>
)}
